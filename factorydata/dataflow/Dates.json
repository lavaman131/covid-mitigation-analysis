{
	"name": "Dates",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CosmosDBPolicy",
						"type": "DatasetReference"
					},
					"name": "Dates"
				},
				{
					"dataset": {
						"referenceName": "OnPremDates",
						"type": "DatasetReference"
					},
					"name": "OnPremDates"
				},
				{
					"dataset": {
						"referenceName": "AzureSQLDates",
						"type": "DatasetReference"
					},
					"name": "AzureSQLDates"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ODSDates",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join2"
				},
				{
					"name": "join3"
				},
				{
					"name": "select1"
				},
				{
					"name": "RemoveDuplicates"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CountryName as string,",
				"          CountryCode as string,",
				"          RegionName as string,",
				"          RegionCode as string,",
				"          Jurisdiction as string,",
				"          Date as date,",
				"          {C1_School closing} as integer,",
				"          C1_Flag as integer,",
				"          {C2_Workplace closing} as integer,",
				"          C2_Flag as integer,",
				"          {C3_Cancel public events} as integer,",
				"          C3_Flag as integer,",
				"          {C4_Restrictions on gatherings} as integer,",
				"          C4_Flag as integer,",
				"          {C5_Close public transport} as integer,",
				"          C5_Flag as integer,",
				"          {C6_Stay at home requirements} as integer,",
				"          C6_Flag as integer,",
				"          {C7_Restrictions on internal movement} as integer,",
				"          C7_Flag as integer,",
				"          {C8_International travel controls} as integer,",
				"          {E1_Income support} as integer,",
				"          E1_Flag as integer,",
				"          {E2_Debt contract relief} as integer,",
				"          {E3_Fiscal measures} as integer,",
				"          {E4_International support} as integer,",
				"          {H1_Public information campaigns} as integer,",
				"          H1_Flag as integer,",
				"          {H2_Testing policy} as integer,",
				"          {H3_Contact tracing} as integer,",
				"          {H4_Emergency investment in healthcare} as integer,",
				"          {H5_Investment in vaccines} as integer,",
				"          {H6_Facial Coverings} as integer,",
				"          H6_Flag as integer,",
				"          {H7_Vaccination policy} as integer,",
				"          H7_Flag as integer,",
				"          {H8_Protection of elderly people} as integer,",
				"          H8_Flag as integer,",
				"          M1_Wildcard as integer,",
				"          StringencyIndex as integer,",
				"          StringencyIndexForDisplay as integer,",
				"          StringencyLegacyIndex as integer,",
				"          StringencyLegacyIndexForDisplay as integer,",
				"          GovernmentResponseIndex as integer,",
				"          GovernmentResponseIndexForDisplay as integer,",
				"          ContainmentHealthIndex as integer,",
				"          ContainmentHealthIndexForDisplay as integer,",
				"          EconomicSupportIndex as integer,",
				"          EconomicSupportIndexForDisplay as integer,",
				"          id as string,",
				"          {_rid} as string,",
				"          {_self} as string,",
				"          {_etag} as string,",
				"          {_attachments} as string,",
				"          {_ts} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> Dates",
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> OnPremDates",
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> AzureSQLDates",
				"OnPremDates, AzureSQLDates join(OnPremDates@FullDate == AzureSQLDates@FullDate,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2, Dates join(OnPremDates@FullDate == Date,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"join3 select(mapColumn(",
				"          DateKey = OnPremDates@DateKey,",
				"          FullDate = OnPremDates@FullDate,",
				"          isWeekDay = OnPremDates@isWeekDay,",
				"          DayOfWeek = OnPremDates@DayOfWeek,",
				"          DayOfMonth = OnPremDates@DayOfMonth,",
				"          DayOfQuarter = OnPremDates@DayOfQuarter,",
				"          DayOfYear = OnPremDates@DayOfYear,",
				"          DayName = OnPremDates@DayName,",
				"          WeekOfYear = OnPremDates@WeekOfYear,",
				"          WeekName = OnPremDates@WeekName,",
				"          MonthOfYear = OnPremDates@MonthOfYear,",
				"          MonthName = OnPremDates@MonthName,",
				"          CalendarQuarter = OnPremDates@CalendarQuarter,",
				"          CalendarQuarterName = OnPremDates@CalendarQuarterName,",
				"          CalendarYear = OnPremDates@CalendarYear,",
				"          FiscalMonth = OnPremDates@FiscalMonth,",
				"          FiscalMonthName = OnPremDates@FiscalMonthName,",
				"          FiscalQuarter = OnPremDates@FiscalQuarter,",
				"          FiscalQuarterName = OnPremDates@FiscalQuarterName,",
				"          FiscalYear = OnPremDates@FiscalYear,",
				"          DateKey = AzureSQLDates@DateKey,",
				"          FullDate = AzureSQLDates@FullDate,",
				"          isWeekDay = AzureSQLDates@isWeekDay,",
				"          DayOfWeek = AzureSQLDates@DayOfWeek,",
				"          DayOfMonth = AzureSQLDates@DayOfMonth,",
				"          DayOfQuarter = AzureSQLDates@DayOfQuarter,",
				"          DayOfYear = AzureSQLDates@DayOfYear,",
				"          DayName = AzureSQLDates@DayName,",
				"          WeekOfYear = AzureSQLDates@WeekOfYear,",
				"          WeekName = AzureSQLDates@WeekName,",
				"          MonthOfYear = AzureSQLDates@MonthOfYear,",
				"          MonthName = AzureSQLDates@MonthName,",
				"          CalendarQuarter = AzureSQLDates@CalendarQuarter,",
				"          CalendarQuarterName = AzureSQLDates@CalendarQuarterName,",
				"          CalendarYear = AzureSQLDates@CalendarYear,",
				"          FiscalMonth = AzureSQLDates@FiscalMonth,",
				"          FiscalMonthName = AzureSQLDates@FiscalMonthName,",
				"          FiscalQuarter = AzureSQLDates@FiscalQuarter,",
				"          FiscalQuarterName = AzureSQLDates@FiscalQuarterName,",
				"          FiscalYear = AzureSQLDates@FiscalYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 aggregate(groupBy(DayName,",
				"          FullDate,",
				"          isWeekDay,",
				"          DayOfWeek,",
				"          DayOfMonth,",
				"          DayOfQuarter,",
				"          DayOfYear,",
				"          WeekOfYear,",
				"          WeekName,",
				"          MonthOfYear,",
				"          MonthName,",
				"          CalendarQuarter,",
				"          CalendarQuarterName,",
				"          CalendarYear,",
				"          FiscalMonth,",
				"          FiscalMonthName,",
				"          FiscalQuarter,",
				"          FiscalQuarterName,",
				"          FiscalYear,",
				"          DateKey),",
				"     DateFreq = count(FullDate)) ~> RemoveDuplicates",
				"RemoveDuplicates select(mapColumn(",
				"          DateKey,",
				"          Date = FullDate,",
				"          DayName,",
				"          isWeekDay,",
				"          DayOfWeek,",
				"          DayOfMonth,",
				"          DayOfQuarter,",
				"          DayOfYear,",
				"          WeekOfYear,",
				"          WeekName,",
				"          MonthOfYear,",
				"          MonthName,",
				"          CalendarQuarter,",
				"          CalendarQuarterName,",
				"          CalendarYear,",
				"          FiscalMonth,",
				"          FiscalMonthName,",
				"          FiscalQuarter,",
				"          FiscalQuarterName,",
				"          FiscalYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CountryCode as string,",
				"          Date as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['dates.parquet'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}
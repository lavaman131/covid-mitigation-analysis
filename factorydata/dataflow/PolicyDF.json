{
	"name": "PolicyDF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CosmosDBPolicy",
						"type": "DatasetReference"
					},
					"name": "PolicyData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "policydata",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "policy"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CountryName as string,",
				"          CountryCode as string,",
				"          RegionName as string,",
				"          RegionCode as string,",
				"          Jurisdiction as string,",
				"          Date as date,",
				"          {C1_School closing} as integer,",
				"          C1_Flag as integer,",
				"          {C2_Workplace closing} as integer,",
				"          C2_Flag as integer,",
				"          {C3_Cancel public events} as integer,",
				"          C3_Flag as integer,",
				"          {C4_Restrictions on gatherings} as integer,",
				"          C4_Flag as integer,",
				"          {C5_Close public transport} as integer,",
				"          C5_Flag as integer,",
				"          {C6_Stay at home requirements} as integer,",
				"          C6_Flag as integer,",
				"          {C7_Restrictions on internal movement} as integer,",
				"          C7_Flag as integer,",
				"          {C8_International travel controls} as integer,",
				"          {E1_Income support} as integer,",
				"          E1_Flag as integer,",
				"          {E2_Debt contract relief} as integer,",
				"          {E3_Fiscal measures} as integer,",
				"          {E4_International support} as integer,",
				"          {H1_Public information campaigns} as integer,",
				"          H1_Flag as integer,",
				"          {H2_Testing policy} as integer,",
				"          {H3_Contact tracing} as integer,",
				"          {H4_Emergency investment in healthcare} as integer,",
				"          {H5_Investment in vaccines} as integer,",
				"          {H6_Facial Coverings} as integer,",
				"          H6_Flag as integer,",
				"          {H7_Vaccination policy} as integer,",
				"          H7_Flag as integer,",
				"          {H8_Protection of elderly people} as integer,",
				"          H8_Flag as integer,",
				"          M1_Wildcard as integer,",
				"          StringencyIndex as integer,",
				"          StringencyIndexForDisplay as integer,",
				"          StringencyLegacyIndex as integer,",
				"          StringencyLegacyIndexForDisplay as integer,",
				"          GovernmentResponseIndex as integer,",
				"          GovernmentResponseIndexForDisplay as integer,",
				"          ContainmentHealthIndex as integer,",
				"          ContainmentHealthIndexForDisplay as integer,",
				"          EconomicSupportIndex as integer,",
				"          EconomicSupportIndexForDisplay as integer,",
				"          id as string,",
				"          {_rid} as string,",
				"          {_self} as string,",
				"          {_etag} as string,",
				"          {_attachments} as string,",
				"          {_ts} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> PolicyData",
				"PolicyData select(mapColumn(",
				"          CountryName,",
				"          CountryCode,",
				"          Jurisdiction,",
				"          Date,",
				"          {C1_School closing},",
				"          C1_Flag,",
				"          {C2_Workplace closing},",
				"          C2_Flag,",
				"          {C3_Cancel public events},",
				"          C3_Flag,",
				"          {C4_Restrictions on gatherings},",
				"          C4_Flag,",
				"          {C5_Close public transport},",
				"          C5_Flag,",
				"          {C6_Stay at home requirements},",
				"          C6_Flag,",
				"          {C7_Restrictions on internal movement},",
				"          C7_Flag,",
				"          {C8_International travel controls},",
				"          {E1_Income support},",
				"          E1_Flag,",
				"          {E2_Debt contract relief},",
				"          {E3_Fiscal measures},",
				"          {E4_International support},",
				"          {H1_Public information campaigns},",
				"          H1_Flag,",
				"          {H2_Testing policy},",
				"          {H3_Contact tracing},",
				"          {H4_Emergency investment in healthcare},",
				"          {H5_Investment in vaccines},",
				"          {H6_Facial Coverings},",
				"          H6_Flag,",
				"          {H7_Vaccination policy},",
				"          H7_Flag,",
				"          {H8_Protection of elderly people},",
				"          H8_Flag,",
				"          M1_Wildcard,",
				"          StringencyIndex,",
				"          StringencyIndexForDisplay,",
				"          StringencyLegacyIndex,",
				"          StringencyLegacyIndexForDisplay,",
				"          GovernmentResponseIndex,",
				"          GovernmentResponseIndexForDisplay,",
				"          ContainmentHealthIndex,",
				"          ContainmentHealthIndexForDisplay,",
				"          EconomicSupportIndex,",
				"          EconomicSupportIndexForDisplay,",
				"          id,",
				"          {_rid},",
				"          {_self},",
				"          {_etag},",
				"          {_attachments},",
				"          {_ts}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> policy",
				"policy sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CountryCode as string,",
				"          Date as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['policy.parquet'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}
{
	"name": "CasesDeathsRecoveriesDF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSQLMetrics",
						"type": "DatasetReference"
					},
					"name": "AzureSQLMetrics"
				},
				{
					"dataset": {
						"referenceName": "OnPremCovid",
						"type": "DatasetReference"
					},
					"name": "OnPremCovid"
				},
				{
					"dataset": {
						"referenceName": "etl_policy_data",
						"type": "DatasetReference"
					},
					"name": "PolicyData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "recoveriesdata",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "deathsdata",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "casesdata",
						"type": "DatasetReference"
					},
					"name": "sink3"
				}
			],
			"transformations": [
				{
					"name": "union1"
				},
				{
					"name": "cases"
				},
				{
					"name": "deaths"
				},
				{
					"name": "recoveries"
				},
				{
					"name": "join1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> AzureSQLMetrics",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> OnPremCovid",
				"source(output(",
				"          CountryName as string,",
				"          CountryCode as string,",
				"          Jurisdiction as string,",
				"          Date as date,",
				"          C1Schoolclosing as integer,",
				"          C1Flag as integer,",
				"          C2Workplaceclosing as integer,",
				"          C2Flag as integer,",
				"          C3Cancelpublicevents as integer,",
				"          C3Flag as integer,",
				"          C4Restrictionsongatherings as integer,",
				"          C4Flag as integer,",
				"          C5Closepublictransport as integer,",
				"          C5Flag as integer,",
				"          C6Stayathomerequirements as integer,",
				"          C6Flag as integer,",
				"          C7Restrictionsoninternalmovement as integer,",
				"          C7Flag as integer,",
				"          C8Internationaltravelcontrols as integer,",
				"          E1Incomesupport as integer,",
				"          E1Flag as integer,",
				"          E2Debtcontractrelief as integer,",
				"          E3Fiscalmeasures as integer,",
				"          E4Internationalsupport as integer,",
				"          H1Publicinformationcampaigns as integer,",
				"          H1Flag as integer,",
				"          H2Testingpolicy as integer,",
				"          H3Contacttracing as integer,",
				"          H4Emergencyinvestmentinhealthcare as integer,",
				"          H5Investmentinvaccines as integer,",
				"          H6FacialCoverings as integer,",
				"          H6Flag as integer,",
				"          H7Vaccinationpolicy as integer,",
				"          H7Flag as integer,",
				"          H8Protectionofelderlypeople as integer,",
				"          H8Flag as integer,",
				"          M1Wildcard as integer,",
				"          StringencyIndex as integer,",
				"          StringencyIndexForDisplay as integer,",
				"          StringencyLegacyIndex as integer,",
				"          StringencyLegacyIndexForDisplay as integer,",
				"          GovernmentResponseIndex as integer,",
				"          GovernmentResponseIndexForDisplay as integer,",
				"          ContainmentHealthIndex as integer,",
				"          ContainmentHealthIndexForDisplay as integer,",
				"          EconomicSupportIndex as integer,",
				"          EconomicSupportIndexForDisplay as integer,",
				"          id as string,",
				"          {_rid} as string,",
				"          {_self} as string,",
				"          {_etag} as string,",
				"          {_attachments} as string,",
				"          {_ts} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> PolicyData",
				"AzureSQLMetrics, OnPremCovid union(byName: true)~> union1",
				"join1 select(mapColumn(",
				"          CountryCode,",
				"          Date,",
				"          Confirmed,",
				"          Confirmed_Change",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> cases",
				"join1 select(mapColumn(",
				"          CountryCode,",
				"          Date,",
				"          Deaths,",
				"          Deaths_Change",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> deaths",
				"join1 select(mapColumn(",
				"          CountryCode,",
				"          Date,",
				"          Recovered,",
				"          Recovered_Change",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> recoveries",
				"select2, select3 join(select2@Date == select3@Date,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"union1 select(mapColumn(",
				"          ID,",
				"          Date = Updated,",
				"          Confirmed,",
				"          Confirmed_Change,",
				"          Deaths,",
				"          Deaths_Change,",
				"          Recovered,",
				"          Recovered_Change,",
				"          Latitude,",
				"          Longitude,",
				"          ISO2,",
				"          CountryCode = ISO3,",
				"          CountryName = Country_Region,",
				"          load_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"PolicyData select(mapColumn(",
				"          Date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"recoveries sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CountryCode as string,",
				"          Date as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['recoveries.parquet'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"deaths sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CountryCode as string,",
				"          Date as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['deaths.parquet'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2",
				"cases sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CountryCode as string,",
				"          Date as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer",
				"     ),",
				"     format: 'parquet',",
				"     partitionFileNames:['cases.parquet'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink3"
			]
		}
	}
}
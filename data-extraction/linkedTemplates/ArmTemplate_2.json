{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "data-extraction"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/GeographyDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSQLCountry",
								"type": "DatasetReference"
							},
							"name": "AzureSQLCountry"
						},
						{
							"dataset": {
								"referenceName": "OnPremCountry",
								"type": "DatasetReference"
							},
							"name": "OnPremCountry"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "countrydata",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "country"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Country as string,",
						"          CountryCode as string,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> AzureSQLCountry",
						"source(output(",
						"          Country as string,",
						"          CountryCode as string,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> OnPremCountry",
						"AzureSQLCountry union(byName: true)~> country",
						"country sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['country.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ODS Creation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSQLCountry",
								"type": "DatasetReference"
							},
							"name": "AzureSQLCountry"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLMetrics",
								"type": "DatasetReference"
							},
							"name": "AzureSQLMetrics"
						},
						{
							"dataset": {
								"referenceName": "AzureSQLDates",
								"type": "DatasetReference"
							},
							"name": "AzureSQLDates"
						},
						{
							"dataset": {
								"referenceName": "CosmosDBPolicy",
								"type": "DatasetReference"
							},
							"name": "CosmosDBPolicy"
						},
						{
							"dataset": {
								"referenceName": "OnPremCountry",
								"type": "DatasetReference"
							},
							"name": "OnPremCountry"
						},
						{
							"dataset": {
								"referenceName": "OnPremCovid",
								"type": "DatasetReference"
							},
							"name": "OnPremCovid"
						},
						{
							"dataset": {
								"referenceName": "OnPremDates",
								"type": "DatasetReference"
							},
							"name": "OnPremDates"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "FullCountryDataSinkODS",
								"type": "DatasetReference"
							},
							"name": "sinkFullCountryData",
							"description": "put the country data in the covid data lake ods"
						},
						{
							"dataset": {
								"referenceName": "FullDatesDataSinkODS",
								"type": "DatasetReference"
							},
							"name": "sinkFullDatesData",
							"description": "sink dates data to covid data lake ods"
						},
						{
							"dataset": {
								"referenceName": "FullMetricsDataSinkODS",
								"type": "DatasetReference"
							},
							"name": "sinkFullMetricsData"
						}
					],
					"transformations": [
						{
							"name": "combAzureSQLCountry"
						},
						{
							"name": "selectcountries"
						},
						{
							"name": "FullCombinedCountry"
						},
						{
							"name": "selectdates"
						},
						{
							"name": "dateformat"
						},
						{
							"name": "combAzureSQLDates"
						},
						{
							"name": "FullCombinedDates"
						},
						{
							"name": "selectmetrics"
						},
						{
							"name": "combAzureSQLMetrics"
						},
						{
							"name": "cosmosmetrics"
						},
						{
							"name": "SQLMetrics"
						},
						{
							"name": "joinedmetricswithcountry"
						},
						{
							"name": "metrics1"
						},
						{
							"name": "FullCombinedMetrics"
						},
						{
							"name": "selectmetricstosink"
						}
					],
					"scriptLines": [
						"parameters{",
						"     columnnaming as string (\"Date\")",
						"}",
						"source(output(",
						"          Country as string,",
						"          CountryCode as string,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> AzureSQLCountry",
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> AzureSQLMetrics",
						"source(output(",
						"          DateKey as integer,",
						"          FullDate as date,",
						"          isWeekDay as boolean,",
						"          DayOfWeek as integer,",
						"          DayOfMonth as integer,",
						"          DayOfQuarter as integer,",
						"          DayOfYear as integer,",
						"          DayName as string,",
						"          WeekOfYear as integer,",
						"          WeekName as string,",
						"          MonthOfYear as integer,",
						"          MonthName as string,",
						"          CalendarQuarter as integer,",
						"          CalendarQuarterName as string,",
						"          CalendarYear as integer,",
						"          FiscalMonth as integer,",
						"          FiscalMonthName as string,",
						"          FiscalQuarter as integer,",
						"          FiscalQuarterName as string,",
						"          FiscalYear as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> AzureSQLDates",
						"source(output(",
						"          CountryName as string,",
						"          CountryCode as string,",
						"          RegionName as string,",
						"          RegionCode as string,",
						"          Jurisdiction as string,",
						"          Date as string,",
						"          {C1_School closing} as integer,",
						"          C1_Flag as integer,",
						"          {C2_Workplace closing} as integer,",
						"          C2_Flag as integer,",
						"          {C3_Cancel public events} as integer,",
						"          C3_Flag as integer,",
						"          {C4_Restrictions on gatherings} as integer,",
						"          C4_Flag as integer,",
						"          {C5_Close public transport} as integer,",
						"          C5_Flag as integer,",
						"          {C6_Stay at home requirements} as integer,",
						"          C6_Flag as integer,",
						"          {C7_Restrictions on internal movement} as integer,",
						"          C7_Flag as integer,",
						"          {C8_International travel controls} as integer,",
						"          {E1_Income support} as integer,",
						"          E1_Flag as integer,",
						"          {E2_Debt contract relief} as integer,",
						"          {E3_Fiscal measures} as integer,",
						"          {E4_International support} as integer,",
						"          {H1_Public information campaigns} as integer,",
						"          H1_Flag as integer,",
						"          {H2_Testing policy} as integer,",
						"          {H3_Contact tracing} as integer,",
						"          {H4_Emergency investment in healthcare} as integer,",
						"          {H5_Investment in vaccines} as integer,",
						"          {H6_Facial Coverings} as integer,",
						"          H6_Flag as integer,",
						"          {H7_Vaccination policy} as integer,",
						"          H7_Flag as integer,",
						"          {H8_Protection of elderly people} as integer,",
						"          H8_Flag as integer,",
						"          M1_Wildcard as integer,",
						"          StringencyIndex as integer,",
						"          StringencyIndexForDisplay as integer,",
						"          StringencyLegacyIndex as integer,",
						"          StringencyLegacyIndexForDisplay as integer,",
						"          GovernmentResponseIndex as integer,",
						"          GovernmentResponseIndexForDisplay as integer,",
						"          ContainmentHealthIndex as integer,",
						"          ContainmentHealthIndexForDisplay as integer,",
						"          EconomicSupportIndex as integer,",
						"          EconomicSupportIndexForDisplay as integer,",
						"          id as string,",
						"          {_rid} as string,",
						"          {_self} as string,",
						"          {_etag} as string,",
						"          {_attachments} as string,",
						"          {_ts} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> CosmosDBPolicy",
						"source(output(",
						"          Country as string,",
						"          CountryCode as string,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet') ~> OnPremCountry",
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet') ~> OnPremCovid",
						"source(output(",
						"          DateKey as integer,",
						"          FullDate as date,",
						"          isWeekDay as boolean,",
						"          DayOfWeek as integer,",
						"          DayOfMonth as integer,",
						"          DayOfQuarter as integer,",
						"          DayOfYear as integer,",
						"          DayName as string,",
						"          WeekOfYear as integer,",
						"          WeekName as string,",
						"          MonthOfYear as integer,",
						"          MonthName as string,",
						"          CalendarQuarter as integer,",
						"          CalendarQuarterName as string,",
						"          CalendarYear as integer,",
						"          FiscalMonth as integer,",
						"          FiscalMonthName as string,",
						"          FiscalQuarter as integer,",
						"          FiscalQuarterName as string,",
						"          FiscalYear as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     format: 'parquet') ~> OnPremDates",
						"AzureSQLCountry, OnPremCountry union(byName: true)~> combAzureSQLCountry",
						"CosmosDBPolicy select(mapColumn(",
						"          Country = CountryName,",
						"          CountryCode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectcountries",
						"combAzureSQLCountry, selectcountries union(byName: true)~> FullCombinedCountry",
						"CosmosDBPolicy select(mapColumn(",
						"          Date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectdates",
						"selectdates cast(output(",
						"          Date as date 'yyyy-MM-dd'",
						"     ),",
						"     errors: true) ~> dateformat",
						"AzureSQLDates, OnPremDates union(byName: true)~> combAzureSQLDates",
						"combAzureSQLDates, dateformat union(byName: true)~> FullCombinedDates",
						"CosmosDBPolicy select(mapColumn(",
						"          Date,",
						"          CountryCode,",
						"          {C1_School closing},",
						"          {C2_Workplace closing},",
						"          {C3_Cancel public events},",
						"          {C4_Restrictions on gatherings},",
						"          {C5_Close public transport},",
						"          {C6_Stay at home requirements},",
						"          {C7_Restrictions on internal movement},",
						"          {C8_International travel controls},",
						"          {E1_Income support},",
						"          {E2_Debt contract relief},",
						"          {E3_Fiscal measures},",
						"          {E4_International support},",
						"          {H1_Public information campaigns},",
						"          {H2_Testing policy},",
						"          {H3_Contact tracing},",
						"          {H4_Emergency investment in healthcare},",
						"          {H5_Investment in vaccines},",
						"          {H6_Facial Coverings},",
						"          {H7_Vaccination policy},",
						"          {H8_Protection of elderly people},",
						"          M1_Wildcard,",
						"          StringencyIndex,",
						"          GovernmentResponseIndex,",
						"          ContainmentHealthIndex,",
						"          EconomicSupportIndex,",
						"          id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectmetrics",
						"AzureSQLMetrics, OnPremCovid union(byName: true)~> combAzureSQLMetrics",
						"selectmetrics cast(output(",
						"          Date as date 'yyyy-MM-dd'",
						"     ),",
						"     errors: true) ~> cosmosmetrics",
						"combAzureSQLMetrics select(mapColumn(",
						"          ID,",
						"          Date = Updated,",
						"          Confirmed,",
						"          Confirmed_Change,",
						"          Deaths,",
						"          Deaths_Change,",
						"          Recovered,",
						"          Recovered_Change,",
						"          Latitude,",
						"          Longitude,",
						"          ISO2,",
						"          ISO3,",
						"          Country_Region,",
						"          load_time",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SQLMetrics",
						"cosmosmetrics, FullCombinedCountry join(selectmetrics@CountryCode == FullCombinedCountry@CountryCode,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinedmetricswithcountry",
						"joinedmetricswithcountry select(mapColumn(",
						"          Date,",
						"          {C1_School closing},",
						"          {C2_Workplace closing},",
						"          {C3_Cancel public events},",
						"          {C4_Restrictions on gatherings},",
						"          {C5_Close public transport},",
						"          {C6_Stay at home requirements},",
						"          {C7_Restrictions on internal movement},",
						"          {C8_International travel controls},",
						"          {E1_Income support},",
						"          {E2_Debt contract relief},",
						"          {E3_Fiscal measures},",
						"          {E4_International support},",
						"          {H1_Public information campaigns},",
						"          {H2_Testing policy},",
						"          {H3_Contact tracing},",
						"          {H4_Emergency investment in healthcare},",
						"          {H5_Investment in vaccines},",
						"          {H6_Facial Coverings},",
						"          {H7_Vaccination policy},",
						"          {H8_Protection of elderly people},",
						"          M1_Wildcard,",
						"          StringencyIndex,",
						"          GovernmentResponseIndex,",
						"          ContainmentHealthIndex,",
						"          EconomicSupportIndex,",
						"          id,",
						"          Country,",
						"          CountryCode = FullCombinedCountry@CountryCode,",
						"          Latitude,",
						"          Longitude",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> metrics1",
						"metrics1, SQLMetrics join(metrics1@Date == SQLMetrics@Date,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FullCombinedMetrics",
						"FullCombinedMetrics select(mapColumn(",
						"          Date = metrics1@Date,",
						"          C1Schoolclosing = {C1_School closing},",
						"          C2Workplaceclosing = {C2_Workplace closing},",
						"          C3Cancelpublicevents = {C3_Cancel public events},",
						"          C4Restrictionsongatherings = {C4_Restrictions on gatherings},",
						"          C5Closepublictransport = {C5_Close public transport},",
						"          C6Stayathomerequirements = {C6_Stay at home requirements},",
						"          C7Restrictionsoninternalmovement = {C7_Restrictions on internal movement},",
						"          C8Internationaltravelcontrols = {C8_International travel controls},",
						"          E1incomesupport = {E1_Income support},",
						"          E2Debtcontractrelief = {E2_Debt contract relief},",
						"          E3Fiscalmeasures = {E3_Fiscal measures},",
						"          E4Internationalsupport = {E4_International support},",
						"          H1Publicinformationcampaigns = {H1_Public information campaigns},",
						"          H2Testingpolicy = {H2_Testing policy},",
						"          H3Contacttracing = {H3_Contact tracing},",
						"          H4Emergencyinvestmentinhealthcare = {H4_Emergency investment in healthcare},",
						"          H5Investmentinvaccines = {H5_Investment in vaccines},",
						"          H6FacialCoverings = {H6_Facial Coverings},",
						"          H7Vaccinationpolicy = {H7_Vaccination policy},",
						"          H8Protectionofelderlypeople = {H8_Protection of elderly people},",
						"          M1Wildcard = M1_Wildcard,",
						"          StringencyIndex,",
						"          GovernmentResponseIndex,",
						"          ContainmentHealthIndex,",
						"          EconomicSupportIndex,",
						"          id = metrics1@id,",
						"          Country,",
						"          CountryCode,",
						"          Latitude = metrics1@Latitude,",
						"          Longitude = metrics1@Longitude,",
						"          ID = SQLMetrics@ID,",
						"          Date = SQLMetrics@Date,",
						"          Confirmed,",
						"          Confirmed_Change,",
						"          Deaths,",
						"          Deaths_Change,",
						"          Recovered,",
						"          Recovered_Change,",
						"          Latitude = SQLMetrics@Latitude,",
						"          Longitude = SQLMetrics@Longitude,",
						"          ISO2,",
						"          ISO3,",
						"          Country_Region,",
						"          load_time",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectmetricstosink",
						"FullCombinedCountry sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['sinkFullCountryData'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkFullCountryData",
						"FullCombinedDates sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['sinkFullDatesData'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkFullDatesData",
						"selectmetricstosink sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['sinkFullMetricsData'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkFullMetricsData"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PolicyDF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CosmosDBPolicy",
								"type": "DatasetReference"
							},
							"name": "PolicyData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "policydata",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "policy"
						},
						{
							"name": "policyextracted"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CountryName as string,",
						"          CountryCode as string,",
						"          RegionName as string,",
						"          RegionCode as string,",
						"          Jurisdiction as string,",
						"          Date as date,",
						"          {C1_School closing} as integer,",
						"          C1_Flag as integer,",
						"          {C2_Workplace closing} as integer,",
						"          C2_Flag as integer,",
						"          {C3_Cancel public events} as integer,",
						"          C3_Flag as integer,",
						"          {C4_Restrictions on gatherings} as integer,",
						"          C4_Flag as integer,",
						"          {C5_Close public transport} as integer,",
						"          C5_Flag as integer,",
						"          {C6_Stay at home requirements} as integer,",
						"          C6_Flag as integer,",
						"          {C7_Restrictions on internal movement} as integer,",
						"          C7_Flag as integer,",
						"          {C8_International travel controls} as integer,",
						"          {E1_Income support} as integer,",
						"          E1_Flag as integer,",
						"          {E2_Debt contract relief} as integer,",
						"          {E3_Fiscal measures} as integer,",
						"          {E4_International support} as integer,",
						"          {H1_Public information campaigns} as integer,",
						"          H1_Flag as integer,",
						"          {H2_Testing policy} as integer,",
						"          {H3_Contact tracing} as integer,",
						"          {H4_Emergency investment in healthcare} as integer,",
						"          {H5_Investment in vaccines} as integer,",
						"          {H6_Facial Coverings} as integer,",
						"          H6_Flag as integer,",
						"          {H7_Vaccination policy} as integer,",
						"          H7_Flag as integer,",
						"          {H8_Protection of elderly people} as integer,",
						"          H8_Flag as integer,",
						"          M1_Wildcard as integer,",
						"          StringencyIndex as integer,",
						"          StringencyIndexForDisplay as integer,",
						"          StringencyLegacyIndex as integer,",
						"          StringencyLegacyIndexForDisplay as integer,",
						"          GovernmentResponseIndex as integer,",
						"          GovernmentResponseIndexForDisplay as integer,",
						"          ContainmentHealthIndex as integer,",
						"          ContainmentHealthIndexForDisplay as integer,",
						"          EconomicSupportIndex as integer,",
						"          EconomicSupportIndexForDisplay as integer,",
						"          id as string,",
						"          {_rid} as string,",
						"          {_self} as string,",
						"          {_etag} as string,",
						"          {_attachments} as string,",
						"          {_ts} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine') ~> PolicyData",
						"PolicyData select(mapColumn(",
						"          each(patternMatch(`^[^_][a-zA-Z0-9_]*$`, /* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> policy",
						"policy select(mapColumn(",
						"          CountryCode,",
						"          Date,",
						"          Jurisdiction,",
						"          C1_Flag,",
						"          C2_Flag,",
						"          C3_Flag,",
						"          C4_Flag,",
						"          C5_Flag,",
						"          C6_Flag,",
						"          C7_Flag,",
						"          E1_Flag,",
						"          H1_Flag,",
						"          H6_Flag,",
						"          H7_Flag,",
						"          H8_Flag,",
						"          M1_Wildcard,",
						"          StringencyIndex,",
						"          StringencyIndexForDisplay,",
						"          StringencyLegacyIndex,",
						"          StringencyLegacyIndexForDisplay,",
						"          GovernmentResponseIndex,",
						"          GovernmentResponseIndexForDisplay,",
						"          ContainmentHealthIndex,",
						"          ContainmentHealthIndexForDisplay,",
						"          EconomicSupportIndex,",
						"          EconomicSupportIndexForDisplay",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> policyextracted",
						"policyextracted sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['policy.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Data Normalization')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CasesDeathsRecoveriesDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CasesDeathsRecoveriesDF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AzureSQLMetrics": {},
									"OnPremCovid": {},
									"sink1": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "GeographyDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PolicyDF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "GeographyDF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AzureSQLCountry": {},
									"OnPremCountry": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PolicyDF",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CasesDeathsRecoveriesDF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PolicyDF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"PolicyData": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/GeographyDF')]",
				"[concat(variables('factoryId'), '/dataflows/PolicyDF')]"
			]
		}
	]
}